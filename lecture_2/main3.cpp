int *foo() // возвращает указатель,
           // в качестве значения берем адрес локальной переменной
{
    int a = 10;
    return &a;
}

int &bar() // возвращает ссылку на локальную переменную;
{
    int b = 20;
    return b;
}

int main()
{
    // ссылка в отличие от указателя должна быть инициализирована
    // Висячие указатели; ссылки

    // указатель хранит адрес ячейки памяти => после завершении a удаляется
    //  => ссылка на удаленную переменную памяти
    int *p = foo(); // bad pointer;
    int &l = bar(); // bad reference; т.к. вызов функции закончился
    // внутри должно все разрушится => &l ссылается на то, что разрушено
    return 0;
}
// Формально указатель — это не номер ячейки памяти, а отдельный тип.
// Но обычно он может быть преобразован к целому числу.
// Вот такой код напечатает адреса переменных в шестнадцатеричном виде:

// Другой (более базовый) способ сослаться на что-то уже существующее в памяти — указатели.
// Это специальные типы данных, которые могут хранить адрес какой-либо другой переменной в памяти.
// Здесь мы можем представлять себе память как длинную ленту с пронумерованными ячейками (байтами).
// Сам адрес переменной можно получить с помощью унарного оператора &: