#include <iostream>
#include <algorithm>
#include <vector>
#include <array>

// --------------------------------
// Ручное управление памятью

// Указатели – переменная, хранящая ячейку памяти;
// Указатели параметризированы;

// Нулевой указатель – nullptr не соответствует никакая ячейка памяти;

// Взятие адреса переменной &

// Оператор разыменования *; можно менять значение в ячейке, на которую указываем

// Указатели и const by default

// Константный указатель – переменная, хранящая адрес некоторой ячейки памяти, который (адрес) нельзя изменить;
// Указатель на константу – это переменная, хранящая адрес некоторой ячейки памяти, данные в этой ячейке нельзя изменить;

// Модификатор – часть типа.

int main()
{
    int i = 3;
    int *const p1 = &i; // константный указатель
    int const *p2 = &i; // указатель на константу
    const int *p3 = &i; // указатель на константу

    // p1 = nullptr; // error, т.к. меняем ссылку
    *p1 = 10;
    p2 = nullptr;
    // *p2 = 10; // error, т.к. меняем значение в ячейке;
    return 0;
    // константный указатель на константу
    // const int const pi4 = &i
}

// Связь массивов и указателей
// Арифметика указателей:
// прибавляем числовое значение, которое означает сдвиг на n ячеек вправо-влево,
// где размер ячейки соответствует типу указателей, который мы имеем

//  Арифметика указателей: двигаемся по массивам:

// (p + k) – сдвиг на k ячеек типа int вправо.
// (p - k) – сдвиг на k ячеек типа int влево.
// (q - p) – кол-во ячеек между указателями p[k] эквивалентно *(p + k)

// gets new pointer;

int main()
{
    int m[10] = {1, 2, 3, 4, 5};
    int *p = &m[0]; // адрес начала массива: ссылка, по которой можно менять
    int *q = &m[9]; // адрес последнего элемента
    int var = m[3]; // адрес последнего элемента

    std::cout << var << std::endl;
    std::cout << p << ' ' << q << std::endl;
    return 0;
}

// Примеры

int main()
{
    int m[10] = {};

    for (int *p = m; p <= m + 9; ++p)
    {
        *p = (p - m) + 1;
    }

    for (auto c : m)
    {
        std::cout << c << '\n';
    }
}

int max_element(int *m, int size)
{
    // сам по себе указатель указывает на 0 ячейку;
    // необходимо передавать сайз

    int max = *m;
    std::cout << max << std::endl;
    for (int i = 1; i < size; ++i)
    {
        if (m[i] > max)
        {
            max = m[i];
        }
    }
    return max;
}

int main()
{
    int m[10] = {};

    for (int *p = m; p <= m + 9; ++p)
    {
        *p = (p - m) + 1;
        // оператор скобочки: прибавляет нужно смещение, разыменовывает и записывает значение
    }

    max_element(m, 10);
} // массив заполнен числами от 1 до 10;
